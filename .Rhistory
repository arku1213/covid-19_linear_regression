geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "GDP Per Capita (2019)")
ggplot(merged_data, aes(x = (pov_rate_2019)^(1/5), y = tot_deaths_1m_pop))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "Poverty Rate (2019)")
ggplot(merged_data, aes(x = log(child_rate_2019), y = tot_deaths_1m_pop))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "Child Mortality Rate (2019)")
ggplot(merged_data, aes(x = region, y = tot_deaths_1m_pop^(1/5), fill = region)) +
geom_boxplot() +
labs(y = "Total Deaths Per Million", x = "Region")
ggplot(merged_data, aes(x = gdp_pcap_2019^(1/5), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "GDP Per Capita (2019)")
ggplot(merged_data, aes(x = pov_rate_2019^(1/5), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "Poverty Rate (2019)")
ggplot(merged_data, aes(x = log(child_rate_2019), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "Child Mortality Rate (2019)")
model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = merged_data)
summary(model)
anova(model)
Anova(model)
# Region 0 is "Africa"
# Region 1 is "Asia & Oceania"
# Region 2 is "Americas"
# Region 3 is "Europe"
intmodel = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019 + gdp_pcap_2019 * pov_rate_2019, data=merged_data)
summary(intmodel)
anova(intmodel)
Anova(intmodel)
qintmodel = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019 + I(pov_rate_2019^2) + gdp_pcap_2019 * pov_rate_2019, data=merged_data)
summary(qintmodel)
anova(qintmodel)
Anova(qintmodel)
anova(model, intmodel)
anova(intmodel, qintmodel)
ggplot(merged_data, aes(x = tot_deaths_1m_pop)) +
geom_histogram(binwidth = 250, color = "white", fill = "steelblue") +
labs(x = "Total Deaths Per Million ", y = "Occurences of Number of Deaths")
xyplot(resid(model)~merged_data$gdp_pcap_2019, ylab="Residuals", xlab="GDP Per Capita", type=c("p", "smooth"))
xyplot(resid(model)~merged_data$pov_rate_2019, ylab="Residuals", xlab = "Poverty Rate 2019",  type=c("p", "smooth"))
xyplot(resid(model)~merged_data$child_rate_2019, ylab="Residuals", xlab = "Child Mortality Rate 2019",  type=c("p", "smooth"))
xyplot(resid(model)~predict(model), ylab="Residuals", xlab="Fitted Values", type=c("p", "smooth"))
xyplot(abs(resid(model))~predict(model), ylab="Absolute Residuals", xlab="Fitted Values", type=c("p", "smooth"))
boxplot(resid(model), ylab="Residuals", horizontal=TRUE)
qqPlot(resid(model), ylab="Residuals")
pairs(~gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=merged_data, main="Scatterplot Matrix")
merged_data <- merged_data %>%
mutate(
gdp_pcap_2019_transformed = gdp_pcap_2019^(1/5),
pov_rate_2019_transformed = pov_rate_2019^(1/5),
child_rate_2019_transformed = log(child_rate_2019)
)
pairs(~tot_deaths_1m_pop + gdp_pcap_2019_transformed + pov_rate_2019_transformed + child_rate_2019_transformed,
data = merged_data,
main = "Scatterplot Matrix")
# Create merged_data dataframe first
data <- data.frame(
gdp_pcap_2019 = rnorm(185, 99.8801, 18.92178),
pov_rate_2019 = rnorm(185, 50.5294, 9.41762),
child_rate_2019 = rnorm(185, 50.5142, 9.482596),
region = rbinom(185, 3, 0.5081081),
fitted_values = rnorm(185, 198.501, 28.77925),
residuals = rnorm(185, 0.06057125, 1.024553)
)
# Calculate mean and SD after creating the dataframe
mean(data$gdp_pcap_2019, na.rm = TRUE)
mean(data$pov_rate_2019, na.rm = TRUE)
mean(data$child_rate_2019, na.rm = TRUE)
mean(data$region, na.rm = TRUE)
mean(data$fitted_values, na.rm = TRUE)
mean(data$residuals, na.rm = TRUE)
sd(data$gdp_pcap_2019, na.rm = TRUE)
sd(data$pov_rate_2019, na.rm = TRUE)
sd(data$child_rate_2019, na.rm = TRUE)
sd(data$region, na.rm = TRUE)
sd(data$fitted_values, na.rm = TRUE)
sd(data$residuals, na.rm = TRUE)
# Create the pair plot
library(GGally)
ggpairs(
data,
title = "Customized Pair Plot",
lower = list(continuous = "smooth"),
diag = list(continuous = "densityDiag"),
upper = list(continuous = "cor")
)
random_rows <- sample(nrow(merged_data), 93)
training_data <- merged_data[random_rows, c("tot_deaths_1m_pop", "gdp_pcap_2019", "region", "pov_rate_2019", "child_rate_2019")]
model.train <- lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = training_data)
summary(model.train)
anova(model.train)
remaining_rows <- setdiff(1:nrow(merged_data), random_rows)
random_rows_validation <- sample(remaining_rows, 92)
validation_data <- merged_data[random_rows_validation, c("tot_deaths_1m_pop", "gdp_pcap_2019", "region", "pov_rate_2019", "child_rate_2019")]
model.validation <- lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = validation_data)
summary(model.validation)
anova(model.validation)
predictions_training <- predict(model.train, newdata = training_data)
ytraining <- training_data$tot_deaths_1m_pop^(1/5)
SSE_training <- anova(model.train)["Residuals", "Sum Sq"]
MSE_training <- anova(model.train)["Residuals", "Mean Sq"]
RMSE_training <- sqrt(mean((predictions_training - ytraining)^2))
R2_training <- 1 - sum((predictions_training - ytraining)^2) / sum((ytraining - mean(ytraining))^2)
PRESS_training <- sum((predictions_training - ytraining)^2)
results_training <- data.frame(
SSE = SSE_training,
PRESS = PRESS_training,
MSE = MSE_training,
RMSE = RMSE_training,
R2 = R2_training
)
print(results_training)
predictions_validation <- predict(model.validation, newdata = validation_data)
yvalidation <- validation_data$tot_deaths_1m_pop^(1/5)
SSE_validation <- anova(model.validation)["Residuals", "Sum Sq"]
MSE_validation <- anova(model.validation)["Residuals", "Mean Sq"]
RMSE_validation <- sqrt(mean((predictions_validation - yvalidation)^2))
R2_validation <- 1 - sum((predictions_validation - yvalidation)^2) / sum((yvalidation - mean(yvalidation))^2)
PRESS_validation <- sum((predictions_validation - yvalidation)^2)
results_validation <- data.frame(
SSE = SSE_validation,
PRESS = PRESS_validation,
MSE = MSE_validation,
RMSE = RMSE_validation,
R2 = R2_validation
)
print(results_validation)
car::vif(model)
dfbetasPlots(model)
plot(dffits(model), ylab="DFFITS"
, type="h")
abline(h=c(-1,1), lty=2)
car::avPlots(model, layout=c(3,2), ask = F)
olsrr::ols_plot_resid_stud(model)
diagnostics_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = merged_data)
subsets = regsubsets(
tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019,
data = merged_data,
nvmax = 4,
method = "forward"
)
model_selection_criteria = data.frame(
with(
summary(subsets),
cbind(
p = as.numeric(rownames(which)),
which,
rss,
rsq,
adjr2,
cp,
bic
)
)
)
best_model_by_bic = model_selection_criteria[order(model_selection_criteria$bic),]
print(best_model_by_bic)
africa_data <- merged_data %>%
filter(region == 0)
asia_oceania_data <- merged_data %>%
filter(region == 1)
americas_data <- merged_data %>%
filter(region == 2)
europe_data <- merged_data %>%
filter(region == 3)
africa_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=africa_data)
asia_oceania_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=asia_oceania_data)
americas_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=americas_data)
europe_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=europe_data)
summary(africa_model)
summary(asia_oceania_model)
summary(americas_model)
summary(europe_model)
library(readr)
library(dplyr)
library(ggplot2)
library(janitor)
library(MASS)
library(tidyverse)
library(GGally)
library(caret)
library(car)
library(olsrr)
library(leaps)
library(knitr)
library(broom)
knitr::opts_chunk$set(echo = TRUE)
packages = c("api2lm", "mosaic", "car", "leaps", "tidyverse", "here")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char=packages)
set.seed(76)
covid <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSI0qVJ1NZWr3aFauI-eTI9aAjlbtIrDfCTFgioqFEs57cfLqFyCrDYyt_VS-Q9WtYx29WXGHEJFY7L/pub?gid=513475649&single=true&output=csv")
pov <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSI0qVJ1NZWr3aFauI-eTI9aAjlbtIrDfCTFgioqFEs57cfLqFyCrDYyt_VS-Q9WtYx29WXGHEJFY7L/pub?gid=1011090687&single=true&output=csv")
gdp <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSI0qVJ1NZWr3aFauI-eTI9aAjlbtIrDfCTFgioqFEs57cfLqFyCrDYyt_VS-Q9WtYx29WXGHEJFY7L/pub?gid=498125960&single=true&output=csv")
child <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSI0qVJ1NZWr3aFauI-eTI9aAjlbtIrDfCTFgioqFEs57cfLqFyCrDYyt_VS-Q9WtYx29WXGHEJFY7L/pub?gid=1548279296&single=true&output=csv")
pov_2019 <- pov %>%
dplyr::select(country, `2019`) %>%
rename(pov_rate_2019 = `2019`)
gdp_2019 <- gdp %>%
dplyr::select(country, `2019`) %>%
rename(gdp_pcap_2019 = `2019`)
child_2019 <- child %>%
dplyr::select(country, `2019`) %>%
rename(child_rate_2019 = `2019`)
country_map <- tibble(
old_name = c("Cabo Verde", "CAR", "Congo", "Czechia", "Democratic Republic of the Congo", "Ivory Coast", "Laos","S. Korea", "Micronesia", "Saint Kitts and Nevis", "Saint Lucia", "St. Vincent Grenadines", "Kyrgyzstan", "Slovakia"),
new_name = c("Cape Verde", "Central African Republic", "Congo, Rep.", "Czech Republic", "Congo, Dem. Rep.", "Cote d'Ivoire", "Lao", "South Korea", "Micronesia, Fed. Sts.", "St. Kitts and Nevis", "St. Lucia", "St. Vincent and the Grenadines", "Kyrgyz Republic", "Slovak Republic")
)
# These countries were labelled by the old name in the Covid dataset (Worldometer), however, was changed so that it matched the new names in the GDP, POV, and Child datasets. This allowed us to append the appropriate information, and reduce number of not available (NA) data for countries.
merged_data <- covid %>%
left_join(country_map, by = c("Country" = "old_name")) %>%
mutate(Country = coalesce(new_name, Country)) %>%
dplyr::select(-new_name) %>%
left_join(pov_2019 %>%
left_join(country_map, by = c("country" = "old_name")) %>%
mutate(country = coalesce(new_name, country)) %>%
dplyr::select(-new_name),
by = c("Country" = "country"))
merged_data <- merged_data %>%
left_join(country_map, by = c("Country" = "old_name")) %>%
mutate(Country = coalesce(new_name, Country)) %>%
dplyr::select(-new_name) %>%
left_join(gdp_2019 %>%
left_join(country_map, by = c("country" = "old_name")) %>%
mutate(country = coalesce(new_name, country)) %>%
dplyr::select(-new_name),
by = c("Country" = "country"))
merged_data <- merged_data %>%
left_join(country_map, by = c("Country" = "old_name")) %>%
mutate(Country = coalesce(new_name, Country)) %>%
dplyr::select(-new_name) %>%
left_join(child_2019 %>%
left_join(country_map, by = c("country" = "old_name")) %>%
mutate(country = coalesce(new_name, country)) %>%
dplyr::select(-new_name),
by = c("Country" = "country"))
# Merged the desired information from our wanted varibales to allow for easy usage.
merged_data <- merged_data %>%
clean_names()
merged_data <- merged_data %>%
mutate(region = case_when(
continent %in% c("Asia", "Oceania") ~ "Asia & Oceania",
continent %in% c("Europe") ~ "Europe",
continent %in% c("Africa") ~ "Africa",
continent %in% c("Northern America", "Latin America and the Caribbean") ~ "Americas",
TRUE ~ "Other"
))
merged_data$region <- factor(merged_data$region,
levels = c("Africa", "Asia & Oceania", "Americas", "Europe"),
labels = c(0, 1, 2, 3))
# Continents were organized into 4 regions as it allowed for a more similar number of countries within each region (Northern America included only 5 countries before, and included Bermuda but no other Caribbean island)
# We felt this was the best way of doing it while still keeping countries as geographically together (Cultural region was another category we felt may be important, but felt had too many categories)
convert_to_numeric <- function(x) {
if (grepl("k$", x, ignore.case = TRUE)) {
return(as.numeric(sub("k$", "", x)) * 1000)
} else {
return(as.numeric(x))
}
}
merged_data$gdp_pcap_2019 <- sapply(merged_data$gdp_pcap_2019, convert_to_numeric)
# The GDP dataset included "k" to represent 1000 (e.g 15.4k = 15400). This converts the k to a numeric value which will allow calculations to be done.
merged_data <- merged_data %>%
dplyr::select(country, tot_deaths_1m_pop, gdp_pcap_2019, region, pov_rate_2019, child_rate_2019)
glimpse(merged_data)
merged_data %>%
sample_n(5)
colSums(is.na(merged_data))
merged_data <- merged_data %>%
filter(!is.na(pov_rate_2019))
colSums(is.na(merged_data))
# We removed the 38 countries that did not include values within the Poverty Rate 2019 column. These were all territories, autonomous regions, collectives, etc (including but not limited to British Virgin Islands, St Barth, and Niue). The 38 countries that did not have a Poverty Rate for 2019 also overlapped with the countries that were all missing GDP Per Capita and Child Mortality Rates for 2019.
merged_data %>%
group_by(region) %>%
summarize(n = n(),
correlation = cor(tot_deaths_1m_pop, gdp_pcap_2019),
mean = mean(tot_deaths_1m_pop, na.rm = TRUE),
median = median(tot_deaths_1m_pop, na.rm = TRUE),
sd = sd(tot_deaths_1m_pop, na.rm = TRUE))
merged_data %>%
group_by(region) %>%
summarize(n = n(),
correlation = cor(tot_deaths_1m_pop, pov_rate_2019),
mean = mean(tot_deaths_1m_pop, na.rm = TRUE),
median = median(tot_deaths_1m_pop, na.rm = TRUE),
sd = sd(tot_deaths_1m_pop, na.rm = TRUE))
merged_data %>%
group_by(region) %>%
summarize(n = n(),
correlation = cor(tot_deaths_1m_pop, child_rate_2019),
mean = mean(tot_deaths_1m_pop, na.rm = TRUE),
median = median(tot_deaths_1m_pop, na.rm = TRUE),
sd = sd(tot_deaths_1m_pop, na.rm = TRUE))
oldmodel = lm(tot_deaths_1m_pop~gdp_pcap_2019 +region+pov_rate_2019 +child_rate_2019, data = merged_data)
oldmodel_summary <- tidy(oldmodel)
kable(oldmodel_summary, format = "html", table.attr = 'style="font-size: 0.9em; overflow-x: auto;"', escape = FALSE)
merged_data <- merged_data %>%
filter(gdp_pcap_2019 > 0, pov_rate_2019 > 0, child_rate_2019 > 0, tot_deaths_1m_pop > 0)
boxcox_gdp <- boxcox(gdp_pcap_2019 ~ 1, data = merged_data)
lambda_gdp <- boxcox_gdp$x[which.max(boxcox_gdp$y)]
merged_data$gdp_rate_transformed <- (merged_data$gdp_pcap_2019^lambda_gdp - 1) / lambda_gdp
boxcox_pov <- boxcox(pov_rate_2019 ~ 1, data = merged_data)
lambda_pov <- boxcox_pov$x[which.max(boxcox_pov$y)]
merged_data$pov_rate_transformed <- (merged_data$pov_rate_2019^lambda_pov - 1) / lambda_pov
boxcox_child <- boxcox(child_rate_2019 ~ 1, data = merged_data)
lambda_child <- boxcox_child$x[which.max(boxcox_child$y)]
merged_data$child_rate_transformed <- (merged_data$child_rate_2019^lambda_child - 1) / lambda_child
boxcox_deaths <- boxcox(tot_deaths_1m_pop ~ 1, data = merged_data)
lambda_deaths <- boxcox_deaths$x[which.max(boxcox_deaths$y)]
merged_data$deaths_transformed <- (merged_data$tot_deaths_1m_pop^lambda_deaths - 1) / lambda_deaths
x_transformed_model = lm(tot_deaths_1m_pop~gdp_rate_transformed +region+pov_rate_transformed +child_rate_2019, data = merged_data)
summary(x_transformed_model)
ggplot(merged_data, aes(x = gdp_pcap_2019^(1/5), y = tot_deaths_1m_pop))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "GDP Per Capita (2019)")
ggplot(merged_data, aes(x = (pov_rate_2019)^(1/5), y = tot_deaths_1m_pop))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "Poverty Rate (2019)")
ggplot(merged_data, aes(x = log(child_rate_2019), y = tot_deaths_1m_pop))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million",
x = "Child Mortality Rate (2019)")
ggplot(merged_data, aes(x = region, y = tot_deaths_1m_pop^(1/5), fill = region)) +
geom_boxplot() +
labs(y = "Total Deaths Per Million", x = "Region")
ggplot(merged_data, aes(x = gdp_pcap_2019^(1/5), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "GDP Per Capita (2019)")
ggplot(merged_data, aes(x = pov_rate_2019^(1/5), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "Poverty Rate (2019)")
ggplot(merged_data, aes(x = log(child_rate_2019), y = tot_deaths_1m_pop, color = region))+
geom_point() +
geom_smooth(method = "lm", se = FALSE ) +
labs(y = "Total Deaths Per Million", x = "Child Mortality Rate (2019)")
model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = merged_data)
summary(model)
anova(model)
Anova(model)
# Region 0 is "Africa"
# Region 1 is "Asia & Oceania"
# Region 2 is "Americas"
# Region 3 is "Europe"
intmodel = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019 + gdp_pcap_2019 * pov_rate_2019, data=merged_data)
summary(intmodel)
anova(intmodel)
Anova(intmodel)
qintmodel = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019 + I(pov_rate_2019^2) + gdp_pcap_2019 * pov_rate_2019, data=merged_data)
summary(qintmodel)
xyplot(resid(oldmodel)~predict(oldmodel), ylab="Residuals", xlab="Fitted Values", type=c("p", "smooth"))
newmodel = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data=merged_data)
newmodel_summary <- tidy(newmodel)
kable(newmodel_summary, format = "html", table.attr = 'style="font-size: 0.9em; overflow-x: auto;"', escape = FALSE)
anova(qintmodel)
Anova(qintmodel)
anova(model, intmodel)
anova(intmodel, qintmodel)
ggplot(merged_data, aes(x = tot_deaths_1m_pop)) +
geom_histogram(binwidth = 250, color = "white", fill = "steelblue") +
labs(x = "Total Deaths Per Million ", y = "Occurences of Number of Deaths")
xyplot(resid(model)~merged_data$gdp_pcap_2019, ylab="Residuals", xlab="GDP Per Capita", type=c("p", "smooth"))
xyplot(resid(model)~merged_data$pov_rate_2019, ylab="Residuals", xlab = "Poverty Rate 2019",  type=c("p", "smooth"))
xyplot(resid(model)~merged_data$child_rate_2019, ylab="Residuals", xlab = "Child Mortality Rate 2019",  type=c("p", "smooth"))
xyplot(abs(resid(model))~predict(model), ylab="Absolute Residuals", xlab="Fitted Values", type=c("p", "smooth"))
boxplot(resid(model), ylab="Residuals", horizontal=TRUE)
qqPlot(resid(model), ylab="Residuals")
pairs(~gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=merged_data, main="Scatterplot Matrix")
merged_data <- merged_data %>%
mutate(
gdp_pcap_2019_transformed = gdp_pcap_2019^(1/5),
pov_rate_2019_transformed = pov_rate_2019^(1/5),
child_rate_2019_transformed = log(child_rate_2019)
)
pairs(~tot_deaths_1m_pop + gdp_pcap_2019_transformed + pov_rate_2019_transformed + child_rate_2019_transformed,
data = merged_data,
main = "Scatterplot Matrix")
# Create merged_data dataframe first
data <- data.frame(
gdp_pcap_2019 = rnorm(185, 99.8801, 18.92178),
pov_rate_2019 = rnorm(185, 50.5294, 9.41762),
child_rate_2019 = rnorm(185, 50.5142, 9.482596),
region = rbinom(185, 3, 0.5081081),
fitted_values = rnorm(185, 198.501, 28.77925),
residuals = rnorm(185, 0.06057125, 1.024553)
)
# Calculate mean and SD after creating the dataframe
mean(data$gdp_pcap_2019, na.rm = TRUE)
mean(data$pov_rate_2019, na.rm = TRUE)
mean(data$child_rate_2019, na.rm = TRUE)
mean(data$region, na.rm = TRUE)
mean(data$fitted_values, na.rm = TRUE)
mean(data$residuals, na.rm = TRUE)
sd(data$gdp_pcap_2019, na.rm = TRUE)
sd(data$pov_rate_2019, na.rm = TRUE)
sd(data$child_rate_2019, na.rm = TRUE)
sd(data$region, na.rm = TRUE)
sd(data$fitted_values, na.rm = TRUE)
sd(data$residuals, na.rm = TRUE)
# Create the pair plot
library(GGally)
ggpairs(
data,
title = "Customized Pair Plot",
lower = list(continuous = "smooth"),
diag = list(continuous = "densityDiag"),
upper = list(continuous = "cor")
)
random_rows <- sample(nrow(merged_data), 93)
training_data <- merged_data[random_rows, c("tot_deaths_1m_pop", "gdp_pcap_2019", "region", "pov_rate_2019", "child_rate_2019")]
model.train <- lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = training_data)
summary(model.train)
anova(model.train)
remaining_rows <- setdiff(1:nrow(merged_data), random_rows)
random_rows_validation <- sample(remaining_rows, 92)
validation_data <- merged_data[random_rows_validation, c("tot_deaths_1m_pop", "gdp_pcap_2019", "region", "pov_rate_2019", "child_rate_2019")]
model.validation <- lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = validation_data)
summary(model.validation)
anova(model.validation)
predictions_training <- predict(model.train, newdata = training_data)
ytraining <- training_data$tot_deaths_1m_pop^(1/5)
SSE_training <- anova(model.train)["Residuals", "Sum Sq"]
MSE_training <- anova(model.train)["Residuals", "Mean Sq"]
RMSE_training <- sqrt(mean((predictions_training - ytraining)^2))
R2_training <- 1 - sum((predictions_training - ytraining)^2) / sum((ytraining - mean(ytraining))^2)
PRESS_training <- sum((predictions_training - ytraining)^2)
results_training <- data.frame(
SSE = SSE_training,
PRESS = PRESS_training,
MSE = MSE_training,
RMSE = RMSE_training,
R2 = R2_training
)
print(results_training)
predictions_validation <- predict(model.validation, newdata = validation_data)
yvalidation <- validation_data$tot_deaths_1m_pop^(1/5)
SSE_validation <- anova(model.validation)["Residuals", "Sum Sq"]
MSE_validation <- anova(model.validation)["Residuals", "Mean Sq"]
RMSE_validation <- sqrt(mean((predictions_validation - yvalidation)^2))
R2_validation <- 1 - sum((predictions_validation - yvalidation)^2) / sum((yvalidation - mean(yvalidation))^2)
PRESS_validation <- sum((predictions_validation - yvalidation)^2)
results_validation <- data.frame(
SSE = SSE_validation,
PRESS = PRESS_validation,
MSE = MSE_validation,
RMSE = RMSE_validation,
R2 = R2_validation
)
print(results_validation)
car::vif(model)
dfbetasPlots(model)
plot(dffits(model), ylab="DFFITS"
, type="h")
abline(h=c(-1,1), lty=2)
car::avPlots(model, layout=c(3,2), ask = F)
diagnostics_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019, data = merged_data)
subsets = regsubsets(
tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + region + pov_rate_2019 + child_rate_2019,
data = merged_data,
nvmax = 4,
method = "forward"
)
model_selection_criteria = data.frame(
with(
summary(subsets),
cbind(
p = as.numeric(rownames(which)),
which,
rss,
rsq,
adjr2,
cp,
bic
)
)
)
best_model_by_bic = model_selection_criteria[order(model_selection_criteria$bic),]
print(best_model_by_bic)
africa_data <- merged_data %>%
filter(region == 0)
asia_oceania_data <- merged_data %>%
filter(region == 1)
americas_data <- merged_data %>%
filter(region == 2)
europe_data <- merged_data %>%
filter(region == 3)
africa_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=africa_data)
asia_oceania_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=asia_oceania_data)
americas_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=americas_data)
europe_model = lm(tot_deaths_1m_pop^(1/5) ~ gdp_pcap_2019 + pov_rate_2019 + child_rate_2019, data=europe_data)
summary(africa_model)
summary(asia_oceania_model)
summary(americas_model)
summary(europe_model)
olsrr::ols_plot_resid_stud(model)
